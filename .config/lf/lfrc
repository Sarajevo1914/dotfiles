#!/bin/sh

# TODO
# zoxide maybe is to cost to performance
# req trash-cli ouch
# wl-copy for wayland
# xclip for x11

# Basic settings
set autoquit true
set shell sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set sortby name
set ignorecase true
set period 1
set mouse true
set ratios '1:2'
set sixel true

### LF PREVIEWS
# use the one that work on your terminal
# for some rason some terminal dont work with vanila ctpv and stpv config
# like alacritty foot, etc.
# only work on those terminal using the sixel.sh
# kitty work only on ctpv and the kitty protocols sh
# but i like the text preview form ctpv that the pistol...

# Kitty Protocol
# req pistol chroma archiver
# set previewer ~/.config/lf/preview-kitty.sh
# set cleaner ~/.config/lf/cleaner-kitty.sh

# Sixel
# set previewer ~/.config/lf/sixel.sh

# ctpv preview
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# stpv preview
# set previewer stpv
# set cleaner stpvimgclr
# &stpvimg --listen $id
# cmd on-quit $stpvimg --end $id

# cmd/funcions
#cmd bulkrename $vidir

cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# luke smith script
# cmd extract ${{
#     clear; tput cup $(($(tput lines)/3)); tput bold
#     set -f
#     printf "%s\n\t" "$fx"
#     printf "extract?[y/N]"
#     read ans
#     [ $ans = "y" ] && {
#         case $fx in
#             *.tar.bz2)   tar xjf $fx     ;;
#             *.tar.gz)    tar xzf $fx     ;;
#             *.bz2)       bunzip2 $fx     ;;
#             *.rar)       unrar e $fx     ;;
#             *.gz)        gunzip $fx      ;;
#             *.tar)       tar xf $fx      ;;
#             *.tbz2)      tar xjf $fx     ;;
#             *.tgz)       tar xzf $fx     ;;
#             *.zip)       unzip $fx       ;;
#             *.Z)         uncompress $fx  ;;
#             *.7z)        7z x $fx        ;;
#             *.tar.xz)    tar xf $fx      ;;
#         esac
#     }
# }}

cmd extract ${{
    clear
    tput cup $(($(tput lines)/3))
    set -f
    printf "%s\n\t" "$fx"
    printf "extract? [y/N] "
    read ans
    case $ans in
        [Yy]*)
            for file in $fx; do
                ouch decompress "$file" && echo "Extracted: $file"
            done
            ;;
    esac
}}

cmd mkdir ${{
    printf "Directory name(s): "
    read -r ans
    [ -z "$ans" ] && exit 0
    mkdir -p -- $ans && echo "Created: $ans"
}}

cmd delete ${{
    clear
    tput cup $(($(tput lines)/3))
    set -f
    printf "Delete files:\n"
    printf "%s\n" $fx
    printf "\nConfirm deletion? [y/N] "
    read -r ans
    case $ans in
        [Yy]*)
            if command -v trash-put >/dev/null 2>&1; then
                trash-put -- $fx
                echo "Files moved to trash"
            else
                echo "trash-cli not found, permanently delete?"
                printf "\nConfirm deletion? [y/N] "
                read -r confirm
                case $confirm in
                    [Yy]*)
                        rm -rf -- $fx
                        echo "Files permanently deleted"
                        ;;
                    *) echo "Aborted";;
                esac
            fi
            ;;
        *) echo "Aborted";;
    esac
}}

cmd copy-name ${{
    basename -a -- $fx | if command -v wl-copy >/dev/null 2>&1; then
        wl-copy
    elif command -v xclip >/dev/null 2>&1; then
        xclip -selection clipboard
    else
        echo "copy-name No clipboard manager found"
    fi
}}

cmd copy-path ${{
    realpath -- $fx | if command -v wl-copy >/dev/null 2>&1; then
        wl-copy
    elif command -v xclip >/dev/null 2>&1; then
        xclip -selection clipboard
    else
        echo "copy-path No clipboard manager found"
    fi
}}

cmd on-select &{{
                   lf -remote "send $id set statfmt \"$(eza -lbdg --total-size --time-style long-iso --color=always "$f")\""

                   if command -v zoxide >/dev/null 2>&1; then
                      zoxide add "$PWD"
                   fi
}}

# Keybidings
map <enter> shell
map q quit

# Movements
map k up
map j down
map h updir
map l open
map <up> up
map <down> down
map <left> updir
map <right> open

map <c-b> page-up
map <c-f> page-down
map <pgup> page-up
map <pgdn> page-down

map gg top
map G bottom
map <home> top
map <end> bottom

map J bottom
map K top
map <a-j> page-down
map <a-k> page-up

# Misc
map <c-l> redraw
map <c-r> reload
map md mkdir

# Search and Selection
map f find
map / search

map n search-next
map N search-prev

map v invert
map u unselect
map C clear

map <space> :toggle; down
map <c-space> :toggle
map <c-a> :unselect; invert

# File Operations
map DD delete
map p paste
map y copy
map x cut

map E :extract; reload

# Clipboard
map Yn copy-name
map Yp copy-path

# External
map x $$f # execute current file (must be executable)
map X !$f
map o open
map O $mimeopen --ask $f

# View
map zh set hidden!
map zr set reverse!
map zn set info
map zs set info size
map zt set info time

# Sort
map za :set sortby name; set info size
map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time
map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info

# Rename
map c push A<c-u>          # New rename
map A :rename; cmd-end     # At very end
map a :rename; cmd-right   # After extension
map I :rename; cmd-home    # At very beginning
map i :rename              # Before extension
#map B bulkrename           # Bulk rename with vidir

# example
# III-beginning-iii-before-extension.aaa-after-extension-AAA-at-very-end

# Unmaping default keybidings
map H
map M
map L
map m

# Shortcuts
map gd cd ~/Documents
map gD cd ~/Downloads
map gp cd ~/Pictures
map gc cd ~/.config
map gM cd /mnt
map gs cd ~/.local/bin
map gh cd ~
map gT cd ~/.local/share/Trash/files
